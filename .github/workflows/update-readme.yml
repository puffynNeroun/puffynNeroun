name: Update README (variable 5-20 per day)

on:
  schedule:
    - cron: "*/15 * * * *"
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: readme-auto-update
  cancel-in-progress: true

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect default branch
        id: def
        shell: bash
        run: |
          set -euo pipefail
          DEF="$(git remote show origin | sed -n '/HEAD branch/s/.*: //p' || true)"
          echo "branch=${DEF:-master}" >> "$GITHUB_OUTPUT"

      - name: Decide and update
        id: run
        shell: bash
        run: |
          set -euo pipefail

          TODAY="$(date -u +%Y-%m-%d)"
          TS="$(date -u +"%Y-%m-%d %H:%M UTC")"
          HOUR=$(date -u +%H)
          DOW=$(date -u +%u)

          if [[ ! -f README.md ]]; then
            echo "README.md missing — nothing to do."
            echo "NothingToDo=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          if (( HOUR < 5 || HOUR > 22 )); then
            echo "Night hours — skip."
            echo "NothingToDo=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          LAST_TS=$(git log -1 --pretty=%ct -- README.md 2>/dev/null || echo 0)
          NOW_TS=$(date -u +%s)
          if (( NOW_TS - LAST_TS < 600 )); then
            echo "Updated <10 min ago — skip."
            echo "NothingToDo=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          if ! grep -q "<!-- ACTIVITY:STATE" README.md; then
            cat >> README.md <<'EOF'

<!-- ACTIVITY:START -->
_Last update: initializing..._
<!-- ACTIVITY:END -->

<!-- ACTIVITY:STATE
DATE=
COUNT=0
TARGET=0
ACTIVITY:STATE -->
EOF
          fi

          START_LINE=$(grep -n "<!-- ACTIVITY:STATE" README.md | cut -d: -f1)
          END_LINE=$(grep -n "ACTIVITY:STATE -->" README.md | cut -d: -f1)

          STATE=$(sed -n "$((START_LINE+1)),$((END_LINE-1))p" README.md)
          DATE=$(echo "$STATE"  | grep '^DATE='   | cut -d= -f2- || true)
          COUNT=$(echo "$STATE" | grep '^COUNT='  | cut -d= -f2- || true)
          TARGET=$(echo "$STATE"| grep '^TARGET=' | cut -d= -f2- || true)

          COUNT=${COUNT:-0}
          TARGET=${TARGET:-0}

          if [[ "$DATE" != "$TODAY" ]]; then
            R=$((RANDOM%100))
            if   (( R < 35 )); then TARGET=$((5  + RANDOM%4))
            elif (( R < 70 )); then TARGET=$((9  + RANDOM%4))
            elif (( R < 90 )); then TARGET=$((13 + RANDOM%4))
            else                   TARGET=$((17 + RANDOM%4))
            fi
            if (( DOW == 6 || DOW == 7 )); then
              TARGET=$(( TARGET - (2 + RANDOM%3) ))
            fi
            (( TARGET < 3 )) && TARGET=3
            COUNT=0
            DATE="$TODAY"
            NEW_DAY="yes"
          else
            NEW_DAY="no"
          fi

          if (( COUNT >= TARGET )); then
            echo "Daily target reached ($COUNT/$TARGET)."
            echo "NothingToDo=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          GAP=$((TARGET-COUNT))
          BASE=$(( 30 + GAP*5 ))
          (( BASE > 85 )) && BASE=85
          if (( HOUR >= 21 && GAP > 2 )); then BASE=$((BASE+20)); fi
          (( BASE > 90 )) && BASE=90

          CHANCE=$((RANDOM%100))
          if (( CHANCE >= BASE )) && [[ "$NEW_DAY" == "no" ]]; then
            echo "Random gate closed (chance=${CHANCE}>=${BASE}) — skip."
            echo "NothingToDo=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          prefixes=("Last update" "Daily checkpoint" "Routine sync" "Status ping" "Heartbeat" "Activity tick")
          focus=("RSC patterns" "Server Actions" "TanStack Query v5" "Prisma schema" "Playwright e2e" "Core Web Vitals" "CI/CD" "NextAuth/SSO" "Redis caching")
          pref=${prefixes[$RANDOM % ${#prefixes[@]}]}
          pick=${focus[$RANDOM % ${#focus[@]}]}
          SNIPPET="${pref}: **${TS}** · Focus today: *${pick}*."

          awk -v repl="$SNIPPET" '
            BEGIN{inblk=0}
            /<!-- ACTIVITY:START -->/ {print; print repl; inblk=1; next}
            /<!-- ACTIVITY:END -->/   {print; inblk=0; next}
            !inblk {print}
          ' README.md > README.tmp && mv README.tmp README.md

          COUNT=$((COUNT+1))
          awk -v date="$DATE" -v count="$COUNT" -v target="$TARGET" '
            BEGIN{inblk=0}
            /<!-- ACTIVITY:STATE/ {print; inblk=1; print "DATE="date; print "COUNT="count; print "TARGET="target; next}
            /ACTIVITY:STATE -->/  {print; inblk=0; next}
            !inblk {print}
          ' README.md > README.tmp && mv README.tmp README.md

          echo "NothingToDo=false" >> "$GITHUB_OUTPUT"

      - name: Rebase onto remote
        if: steps.run.outputs.NothingToDo == 'false'
        run: |
          set -euo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git fetch origin ${{ steps.def.outputs.branch }}
          git rebase origin/${{ steps.def.outputs.branch }} || git reset --hard origin/${{ steps.def.outputs.branch }}

      - name: Commit changes
        if: steps.run.outputs.NothingToDo == 'false'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(readme): auto refresh"
          file_pattern: README.md
          commit_user_name: "Aleksandr Teslia"
          commit_user_email: "130913559+puffynNeroun@users.noreply.github.com"
          commit_author_name: "Aleksandr Teslia"
          commit_author_email: "130913559+puffynNeroun@users.noreply.github.com"
          push_options: '--force-with-lease'
