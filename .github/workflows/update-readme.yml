name: Update README (variable times per day)

on:
  schedule:
    - cron: "7 * * * *"   # каждые ~час (в :07). Частота триггера — почасовая
  workflow_dispatch:       # возможность запустить вручную

permissions:
  contents: write

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Decide and update
        id: run
        shell: bash
        run: |
          set -euo pipefail
          TODAY="$(date -u +%Y-%m-%d)"
          TS="$(date -u +"%Y-%m-%d %H:%M UTC")"

          # вытащим блок STATE
          START_LINE=$(grep -n '<!-- ACTIVITY:STATE' -n README.md | cut -d: -f1)
          END_LINE=$(grep -n 'ACTIVITY:STATE -->' -n README.md | cut -d: -f1)

          if [[ -z "${START_LINE}" || -z "${END_LINE}" ]]; then
            echo "STATE block not found. Abort."
            exit 1
          fi

          STATE=$(sed -n "$((START_LINE+1)),$((END_LINE-1))p" README.md)
          DATE=$(echo "$STATE"  | grep '^DATE='   | cut -d= -f2- || true)
          COUNT=$(echo "$STATE" | grep '^COUNT='  | cut -d= -f2- || true)
          TARGET=$(echo "$STATE"| grep '^TARGET=' | cut -d= -f2- || true)

          COUNT=${COUNT:-0}
          TARGET=${TARGET:-0}

          # если новый день — сбрасываем счётчик и выбираем новую цель (1/2/5)
          if [[ "$DATE" != "$TODAY" ]]; then
            RAND=$((RANDOM%100))
            if   (( RAND < 60 )); then TARGET=1  # 60%
            elif (( RAND < 90 )); then TARGET=2  # 30%
            else TARGET=5                        # 10%
            fi
            COUNT=0
            DATE="$TODAY"
            NEW_DAY="yes"
          else
            NEW_DAY="no"
          fi

          # если уже достигли дневной цели — ничего не делаем
          if (( COUNT >= TARGET )); then
            echo "NothingToDo=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          # случайно решаем, обновляться сейчас или подождать следующего часа
          # (даёт естественное распределение в течение дня)
          CHANCE=$((RANDOM%100))
          if   (( TARGET==1 && CHANCE<35 )); then SHOULD_UPDATE="yes"
          elif (( TARGET==2 && CHANCE<45 )); then SHOULD_UPDATE="yes"
          elif (( TARGET==5 && CHANCE<70 )); then SHOULD_UPDATE="yes"
          else SHOULD_UPDATE="no"
          fi

          if [[ "$SHOULD_UPDATE" != "yes" && "$NEW_DAY" == "no" ]]; then
            echo "NothingToDo=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          # готовим видимый сниппет
          topics=("RSC patterns" "Server Actions" "TanStack Query v5" "Prisma schema" "Playwright e2e" "Core Web Vitals" "CI/CD")
          pick=${topics[$RANDOM % ${#topics[@]}]}
          SNIPPET="Last update: **$TS** · Focus today: *$pick*."

          # вставляем сниппет между ACTIVITY:START/END
          awk -v repl="$SNIPPET" '
            BEGIN{inblk=0}
            /<!-- ACTIVITY:START -->/ {print; print repl; inblk=1; next}
            /<!-- ACTIVITY:END -->/   {print; inblk=0; next}
            !inblk {print}
          ' README.md > README.tmp && mv README.tmp README.md

          # увеличиваем счётчик и обновляем STATE
          COUNT=$((COUNT+1))
          awk -v date="$DATE" -v count="$COUNT" -v target="$TARGET" '
            BEGIN{inblk=0}
            /<!-- ACTIVITY:STATE/ {print; inblk=1; print "DATE="date; print "COUNT="count; print "TARGET="target; next}
            /ACTIVITY:STATE -->/  {print; inblk=0; next}
            !inblk {print}
          ' README.md > README.tmp && mv README.tmp README.md

          echo "NothingToDo=false" >> $GITHUB_OUTPUT

      - name: Commit changes
        if: steps.run.outputs.NothingToDo == 'false'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(readme): daily refresh"
          commit_user_name: "github-actions[bot]"
          commit_user_email: "41898282+github-actions[bot]@users.noreply.github.com"
          file_pattern: README.md
